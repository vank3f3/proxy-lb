name: Build and Push Docker Image

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便正确计算版本

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          # 检查版本文件是否存在，不存在则创建
          if [ ! -f VERSION ]; then
            echo "0.1.0" > VERSION
          fi
          
          # 读取当前版本并去除任何不可见字符
          CURRENT_VERSION=$(cat VERSION | tr -cd '0-9.')
          echo "Current version (cleaned): $CURRENT_VERSION"
          
          # 验证版本格式
          if ! [[ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $CURRENT_VERSION"
            echo "Setting default version 0.1.0"
            CURRENT_VERSION="0.1.0"
          fi
          
          # 解析版本号
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # 递增补丁版本
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          
          # 更新版本文件 (确保没有BOM或其他特殊字符)
          echo -n "$NEW_VERSION" > VERSION
          
          # 显示文件内容的十六进制表示，用于调试
          echo "VERSION file hex dump:"
          hexdump -C VERSION
          
          # 设置输出变量
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version output: $NEW_VERSION"
          
          # 如果不是PR，提交版本更新
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'actions@github.com'
            git add VERSION
            git commit -m "Bump version to $NEW_VERSION [skip ci]"
            git push
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            vank3f3/proxy-lb:latest
            vank3f3/proxy-lb:${{ steps.get_version.outputs.version }}
          cache-from: type=registry,ref=vank3f3/proxy-lb:buildcache
          cache-to: type=registry,ref=vank3f3/proxy-lb:buildcache,mode=max